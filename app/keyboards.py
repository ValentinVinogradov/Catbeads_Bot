from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)

from aiogram.utils.keyboard import InlineKeyboardBuilder
from os import getenv
from dotenv import load_dotenv

from app.database.requests import (
    get_categories, 
    get_items_by_category, 
    get_promo,
    check_items_in_category
)

# from config import ADMINS


edit = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data='name'),
    InlineKeyboardButton(text="–æ–ø–∏—Å–∞–Ω–∏–µ", callback_data='description')],

    [InlineKeyboardButton(text='—Ñ–æ—Ç–æ',callback_data='photo'),
    InlineKeyboardButton(text='—Ü–µ–Ω–∞',callback_data='price')],

    [InlineKeyboardButton(text='<< –Ω–∞–∑–∞–¥',callback_data='to_spec_category')]
],
    resize_keyboard=True,
    input_field_placeholder='–≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é')


apanel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üìå –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='add_item'),
    InlineKeyboardButton(text='‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä ', callback_data='edit_item')],
    
    [InlineKeyboardButton(text='üóë —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='delete_item'),
    InlineKeyboardButton(text='üìÑ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='newsletter')],
    
    [InlineKeyboardButton(text='üìå –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='add_promo'),
    InlineKeyboardButton(text='üóë —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='delete_promo')],
    
    [InlineKeyboardButton(text='üóÇ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', callback_data='promos'),
    InlineKeyboardButton(text='<< –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='to_main')]
],
    resize_keyboard=True,
    input_field_placeholder='–≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é')


async def kb_main(tg_id):
    keyboard = InlineKeyboardBuilder()
    
    keyboard.add(InlineKeyboardButton(text='–∫–∞—Ç–∞–ª–æ–≥', callback_data='catalog'))
    keyboard.add(InlineKeyboardButton(text='–Ω–∞ –∑–∞–∫–∞–∑', callback_data='yours'))
    keyboard.add(InlineKeyboardButton(text='–∫–æ—Ä–∑–∏–Ω–∞', callback_data='my_cart'))
    keyboard.add(InlineKeyboardButton(text='–Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º', callback_data='contacts'))
    keyboard.add(InlineKeyboardButton(text='–¥–æ—Å—Ç–∞–≤–∫–∞', callback_data='delivery'))
    keyboard.add(InlineKeyboardButton(text='–æ—Ç–∑—ã–≤—ã', url='https://vk.com/topic-217319908_49283641'))
    
    if tg_id in map(int, getenv('ADMINS').split()):
        keyboard.add(InlineKeyboardButton(text='–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å–∫—É >>', callback_data = 'to_apanel'))
    
    return keyboard.adjust(2).as_markup()


async def to_apanel_or_main(place_to: str = 'to_main'):
    keyboard = InlineKeyboardBuilder()
    
    if place_to == 'to_main':
        keyboard.add(InlineKeyboardButton(text='<< –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='to_main'))
    else:
        keyboard.add(InlineKeyboardButton(text='<< –≤ –ø–∞–Ω–µ–ª—å–∫—É', callback_data='to_apanel'))
    
    return keyboard.adjust(1).as_markup()


async def confirmation(state: str):
    keyboard = InlineKeyboardBuilder()
    
    if state == 'newsletter':
        keyboard.add(InlineKeyboardButton(text='–¥–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='confirmation'))
    else:
        keyboard.add(InlineKeyboardButton(text='–¥–∞, —É–¥–∞–ª–∏—Ç—å', callback_data='confirmation'))
    keyboard.add(InlineKeyboardButton(text='<< –Ω–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='cancel'))
    
    return keyboard.adjust(1).as_markup()


async def promo_code(is_writing: bool = True):
    keyboard = InlineKeyboardBuilder()
    
    if is_writing:
        keyboard.add(InlineKeyboardButton(text='–¥–∞–ª—å—à–µ >>', callback_data='promo_skip'))
    else:
        keyboard.add(InlineKeyboardButton(text='–¥–∞, –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
                                            callback_data='promo_write'))
        keyboard.add(InlineKeyboardButton(text='–Ω–µ—Ç',
                                            callback_data='promo_skip'))
    
    return keyboard.adjust(1).as_markup()


async def ordering(is_customizing: bool = True):
    keyboard = InlineKeyboardBuilder()
    
    if is_customizing:
        keyboard.add(InlineKeyboardButton(text='–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='custom_ordering'))
        keyboard.add(InlineKeyboardButton(text=' << –Ω–∞–∑–∞–¥', callback_data='yours'))
    else:
        keyboard.add(InlineKeyboardButton(text='–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='ordering'))
        keyboard.add(InlineKeyboardButton(text='<< –Ω–∞–∑–∞–¥', callback_data='to_main'))
    
    return keyboard.adjust(2).as_markup(resize_keyboard=True)


async def del_from_cart(cart_id):
    keyboard = InlineKeyboardBuilder()
    
    keyboard.add(InlineKeyboardButton(text='—É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', callback_data=f'delete_{cart_id}'))
    
    return keyboard.adjust(2).as_markup()


async def cart(cart_id):
    keyboard = InlineKeyboardBuilder()
    
    keyboard.add(InlineKeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'cart_{cart_id}'))
    keyboard.add(InlineKeyboardButton(text='<< –Ω–∞–∑–∞–¥', callback_data='to_spec_category'))
    
    return keyboard.adjust(2).as_markup()


async def categories(place_from:str = 'catalog'):
    all_categories = await get_categories()
    keyboard = InlineKeyboardBuilder()
    
    for category in all_categories:
        keyboard.add(InlineKeyboardButton(text=category.name, 
                                        callback_data=f'category_{category.id}'))
    
    if place_from == 'catalog':
        keyboard.add(InlineKeyboardButton(text='<< –Ω–∞–∑–∞–¥', callback_data='to_main'))
    else:
        keyboard.add(InlineKeyboardButton(text='<< –Ω–∞–∑–∞–¥', callback_data='to_apanel'))
    
    return keyboard.adjust(2).as_markup()


async def items(category_id: int):
    if check_items_in_category(category_id):
        items = await get_items_by_category(category_id)
        keyboard = InlineKeyboardBuilder()
        for item in items:
            keyboard.add(InlineKeyboardButton(text=item.name,
                                            callback_data=f"item_{item.id}"))
    
    keyboard.add(InlineKeyboardButton(text='<< –Ω–∞–∑–∞–¥', callback_data='to_categories'))
    
    return keyboard.adjust(1).as_markup()


async def show_promo_codes():
    keyboard = InlineKeyboardBuilder()
    
    promo_codes = await get_promo()
    
    for promo_code in promo_codes:
        keyboard.add(InlineKeyboardButton(text=f'{promo_code.name} : {promo_code.amount} –æ—Å—Ç.', callback_data=f'promo_{promo_code.name}'))
    
    keyboard.add(InlineKeyboardButton(text='<< –Ω–∞–∑–∞–¥', callback_data='to_apanel'))
    
    return keyboard.adjust(2).as_markup()
